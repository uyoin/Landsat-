# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2022-12-24 12:50:47
"""
import arcpy
import extractPath
import os
import initialize
import extractMTLparameter
from arcpy.sa import *


def L1(reacher_area, root_dir, temp_gdb_path, result_gdb_path, i):
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Check out any necessary licenses.
    # arcpy.CheckOutExtension("spatial")
    # arcpy.CheckOutExtension("3D")
    # arcpy.CheckOutExtension("ImageAnalyst")

    initialize.create_gdb(result_gdb_path)
    initialize.create_gdb(temp_gdb_path)
    workspace = temp_gdb_path + "\\"
    resultspace = result_gdb_path + "\\"
    研究范围 = reacher_area
    NDVI_soil = "0.2"
    NDVI_veg = "0.5"

    B4_name = extractPath.find_filesPaths(root_dir, 'B4')
    B3_name = extractPath.find_filesPaths(root_dir, "B3")
    B6_name = extractPath.find_filesPaths(root_dir, "B6")
    imgname = extractPath.find_imgName(B4_name)
    sensor = initialize.judge_sensor(B4_name[i][0])
    B4_TIF = arcpy.Raster(B4_name[i][0])
    B3_TIF = arcpy.Raster(B3_name[i][0])
    B6_TIF = arcpy.Raster(B6_name[i][0])
    # print(sensor)
    print("[影像-" + imgname[i] + "]" + "B3、B4、B6波段已载入")
    # print(B4_name[8][0])

    mtl_path = extractPath.find_filesPaths(root_dir, "MTL")
    refl_mult_b3, refl_add_b3, QCA_max_b6, QCA_min_b6, radiance_max, radiance_min, k1_b6, k2_b6 = extractMTLparameter.extract_L1values(
        mtl_path[i][0])
    # print(refl_mult_b3, refl_add_b3, QCA_max_b6, QCA_min_b6, radiance_max, radiance_min, k1_b6, k2_b6)
    print("[影像-" + imgname[i] + "]" + "MTL参数已载入")

    print("开始处理影像...")
    # Process: 按掩膜提取 (2) (按掩膜提取) (sa)
    b4cut_tif = workspace + "b4cut"
    按掩膜提取_2_ = b4cut_tif
    b4cut_tif = arcpy.sa.ExtractByMask(in_raster=B4_TIF, in_mask_data=研究范围, extraction_area="INSIDE",
                                       analysis_extent="DEFAULT")
    b4cut_tif.save(按掩膜提取_2_)

    # Process: 转为浮点型 (2) (转为浮点型) (sa)
    Float_b4_tif = workspace + "Float_b4"
    转为浮点型_2_ = Float_b4_tif
    Float_b4_tif = arcpy.sa.Float(in_raster_or_constant=b4cut_tif)
    Float_b4_tif.save(转为浮点型_2_)

    # Process: 按掩膜提取 (按掩膜提取) (sa)
    b3cut_tif = workspace + "b3cut"
    按掩膜提取 = b3cut_tif
    b3cut_tif = arcpy.sa.ExtractByMask(in_raster=B3_TIF, in_mask_data=研究范围, extraction_area="INSIDE",
                                       analysis_extent="DEFAULT")
    b3cut_tif.save(按掩膜提取)

    # Process: 转为浮点型 (转为浮点型) (sa)
    Float_b3_tif = workspace + "Float_b3"
    转为浮点型 = Float_b3_tif
    Float_b3_tif = arcpy.sa.Float(in_raster_or_constant=b3cut_tif)
    Float_b3_tif.save(转为浮点型)

    # Process: 栅格计算器 (栅格计算器) (sa)
    ndvi_tif = workspace + "ndvi"
    栅格计算器 = ndvi_tif
    ndvi_tif = (Float_b4_tif - Float_b3_tif) / (Float_b4_tif + Float_b3_tif + 0.00001)
    ndvi_tif.save(栅格计算器)

    # Process: 栅格计算器 (3) (栅格计算器) (sa)
    r_surf_refle_tif = workspace + "r_surf_refle"
    栅格计算器_3_ = r_surf_refle_tif
    r_surf_refle_tif = Float_b3_tif * float(refl_mult_b3) + float(refl_add_b3)
    r_surf_refle_tif.save(栅格计算器_3_)

    # Process: 栅格计算器 (2) (栅格计算器) (sa)
    landset7_pv = workspace + "landset7_pv"
    栅格计算器_2_ = landset7_pv
    landset7_pv = ((ndvi_tif - float(NDVI_soil)) / (float(NDVI_veg) - float(NDVI_soil))) * (
            (ndvi_tif - float(NDVI_soil)) / (float(NDVI_veg) - float(NDVI_soil)))
    landset7_pv.save(栅格计算器_2_)

    # Process: 栅格计算器 (4) (栅格计算器) (sa)
    emissivity_tif = workspace + "emissivity7"
    栅格计算器_4_ = emissivity_tif
    emissivity_tif = Con(ndvi_tif < 0.2, (0.979 - 0.035 * r_surf_refle_tif),
                         Con(ndvi_tif > 0.5, 0.99, (0.004 * landset7_pv + 0.986)))
    emissivity_tif.save(栅格计算器_4_)

    # Process: 按掩膜提取 (3) (按掩膜提取) (sa)
    b6cut2_tif = workspace + "b6cut2"
    按掩膜提取_3_ = b6cut2_tif
    b6cut2_tif = arcpy.sa.ExtractByMask(in_raster=B6_TIF, in_mask_data=研究范围, extraction_area="INSIDE",
                                        analysis_extent="DEFAULT")
    b6cut2_tif.save(按掩膜提取_3_)

    # Process: 转为浮点型 (3) (转为浮点型) (sa)
    Float_b6_tif = workspace + "Float_b6"
    转为浮点型_3_ = Float_b6_tif
    Float_b6_tif = arcpy.sa.Float(in_raster_or_constant=b6cut2_tif)
    Float_b6_tif.save(转为浮点型_3_)

    # Process: 栅格计算器 (5) (栅格计算器) (sa)
    cv_tif = workspace + "cv"
    栅格计算器_5_ = cv_tif
    cv_tif = ((float(radiance_max) - float(radiance_min)) / (float(QCA_max_b6) - float(QCA_min_b6))) * (
            Float_b6_tif - float(QCA_min_b6)) + float(radiance_min)
    cv_tif.save(栅格计算器_5_)

    # Process: 栅格计算器 (6) (栅格计算器) (sa)
    temp_tif = resultspace + imgname[i] + "_temp"
    栅格计算器_6_ = temp_tif
    temp_tif = float(k2_b6) / Ln(float(k1_b6) * emissivity_tif / cv_tif + 1) - 273
    temp_tif.save(栅格计算器_6_)

    print("处理完毕，最终结果存放至：" + resultspace)


def L2(reacher_area, root_dir, temp_gdb_path, result_gdb_path, i):
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Check out any necessary licenses.
    # arcpy.CheckOutExtension("spatial")
    # arcpy.CheckOutExtension("ImageAnalyst")

    initialize.create_gdb(result_gdb_path)
    initialize.create_gdb(temp_gdb_path)
    workspace = temp_gdb_path + "\\"
    resultspace = result_gdb_path + "\\"

    研究范围 = reacher_area

    mtl_path = extractPath.find_filesPaths(root_dir, "MTL.txt")
    temp_maximum, temp_minimum, temp_mult = extractMTLparameter.extract_L2values(mtl_path[i][0])
    imgname = extractPath.find_imgName(mtl_path)
    print("[影像-" + imgname[i] + "]" + "MTL参数已载入")

    if initialize.judge_sensor(mtl_path[i][0]) == "OLI":
        B10_name = extractPath.find_filesPaths(root_dir, "B10")
        imgname = extractPath.find_imgName(B10_name)
        b10_TIF = arcpy.Raster(B10_name[i][0])
        print("[影像-" + imgname[i] + "]" + "B10波段已载入")

        print("开始处理影像...")
        # Process: 按掩膜提取 (按掩膜提取) (sa)
        b10cut_tif = workspace + "b10cut"
        按掩膜提取 = b10cut_tif
        b10cut_tif = arcpy.sa.ExtractByMask(in_raster=b10_TIF,
                                            in_mask_data=研究范围, extraction_area="INSIDE",
                                            analysis_extent="DEFAULT")
        b10cut_tif.save(按掩膜提取)

        # Process: 栅格计算器 (栅格计算器) (sa)
        temp_tif = resultspace + imgname[i] + "_temp"
        栅格计算器 = temp_tif
        temp_tif = b10cut_tif * float(temp_mult) - float(temp_maximum) + float(temp_minimum) + 100.0
        temp_tif.save(栅格计算器)

    elif initialize.judge_sensor(mtl_path[i][0]) == "ETM+" or "TM":
        B6_name = extractPath.find_filesPaths(root_dir, "B6")
        imgname = extractPath.find_imgName(B6_name)
        b6_TIF = arcpy.Raster(B6_name[i][0])
        print("[影像-" + imgname[i] + "]" + "B6波段已载入")

        print("开始处理影像...")
        # Process: 按掩膜提取 (按掩膜提取) (sa)
        b6cut_tif = workspace + "b6cut"
        按掩膜提取 = b6cut_tif
        b6cut_tif = arcpy.sa.ExtractByMask(in_raster=b6_TIF,
                                           in_mask_data=研究范围, extraction_area="INSIDE",
                                           analysis_extent="DEFAULT")
        b6cut_tif.save(按掩膜提取)

        # Process: 栅格计算器 (栅格计算器) (sa)
        temp_tif = resultspace + imgname[i] + "_temp"
        栅格计算器 = temp_tif
        temp_tif = b6cut_tif * float(temp_mult) - float(temp_maximum) + float(temp_minimum) + 100.0
        temp_tif.save(栅格计算器)



    print("处理完毕，最终结果存放至：" + resultspace)


def loop(reacher_area, root_dir, temp_gdb_path, result_gdb_path, frequency_L1, frequency_L2):
    path_L1, path_L2 = initialize.judge_level_path(root_dir)
    for i in range(frequency_L1):
        print("------------------------- L1进度：" + str(i + 1) + "/" + str(frequency_L1) + " (开始)---------------------------")
        root_dir = path_L1[i][0].replace('\\' + path_L1[i][1], '')
        L1(reacher_area, root_dir, temp_gdb_path, result_gdb_path, 0)
    print("************************* L1处理完毕 **********************************")
    for i in range(frequency_L2):
        print("------------------------- L2进度：" + str(i + 1) + "/" + str(frequency_L2) + " (开始)---------------------------")
        root_dir = path_L2[i][0].replace('\\' + path_L2[i][1], '')
        L2(reacher_area, root_dir, temp_gdb_path, result_gdb_path, 0)
    print("********************************** L2处理完毕 **********************************")
# if __name__ == '__main__':
#     root_dir = "L:\大三课程\【周五早上】遥感探测学综合应用\期末\!Data"
#     temp_gdb_name = "temp.gdb"
#     result_gdb_name = "result.gdb"
#
#     frequency = len(extractPath.find_filesPaths(root_dir, '01_T1_MTL.txt'))
#     print("该文件目录下共有 " + str(frequency) + " 个L1影像")
#     for i in range(frequency):
#         gettempL1(root_dir, temp_gdb_name, result_gdb_name, i)
#     # 清理中间产生的临时数据
#     arcpy.Delete_management(root_dir + "\\" + temp_gdb_name)
